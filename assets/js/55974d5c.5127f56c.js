"use strict";(self.webpackChunkwebdoc=self.webpackChunkwebdoc||[]).push([[9717],{7959:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"plugins/spauth-plugin/providers/biometric-provider","title":"Biometric","description":"Documentation for configuring the Biometric Provider in SPAuth.","source":"@site/docs/plugins/spauth-plugin/providers/biometric.md","sourceDirName":"plugins/spauth-plugin/providers","slug":"/plugins/spauth-plugin/providers/biometric-provider","permalink":"/startpoint-android/docs/plugins/spauth-plugin/providers/biometric-provider","draft":false,"unlisted":false,"editUrl":"https://github.com/lavinou/startpoint-android/tree/main/docs/docs/plugins/spauth-plugin/providers/biometric.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"biometric-provider","title":"Biometric","description":"Documentation for configuring the Biometric Provider in SPAuth.","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Password","permalink":"/startpoint-android/docs/plugins/spauth-plugin/providers/password-provider"},"next":{"title":"API Reference","permalink":"/startpoint-android/docs/plugins/spauth-plugin/api-reference"}}');var r=n(4848),s=n(8453);const o={id:"biometric-provider",title:"Biometric",description:"Documentation for configuring the Biometric Provider in SPAuth.",sidebar_position:2},c="Biometric",d={},l=[{value:"Overview",id:"overview",level:2},{value:"Installation",id:"installation",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Configuration Properties",id:"configuration-properties",level:3},{value:"Example: Setting Up the Biometric Provider",id:"example-setting-up-the-biometric-provider",level:2},{value:"BiometricSPAuthBackend",id:"biometricspauthbackend",level:2},{value:"Inherited Methods from SPAuthenticationBackend",id:"inherited-methods-from-spauthenticationbackend",level:3},{value:"Additional Methods in BiometricSPAuthBackend",id:"additional-methods-in-biometricspauthbackend",level:3},{value:"Authentication Results",id:"authentication-results",level:2},{value:"Example Backend Implementation",id:"example-backend-implementation",level:2},{value:"Summary of Key Components",id:"summary-of-key-components",level:2},{value:"Configuration Properties",id:"configuration-properties-1",level:3},{value:"Backend Methods",id:"backend-methods",level:3}];function a(e){const i={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.header,{children:(0,r.jsx)(i.h1,{id:"biometric",children:"Biometric"})}),"\n",(0,r.jsx)(i.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(i.p,{children:["The ",(0,r.jsx)(i.strong,{children:"Biometric Provider"})," in ",(0,r.jsx)(i.strong,{children:"SPAuth"})," offers secure authentication using biometric credentials like fingerprints or facial recognition. It integrates with a server-side backend via the ",(0,r.jsx)(i.strong,{children:"BiometricSPAuthBackend"}),", which extends the general ",(0,r.jsx)(i.strong,{children:"SPAuthenticationBackend"})," interface."]}),"\n",(0,r.jsx)(i.p,{children:"This guide details how to configure, implement, and use the Biometric Provider for biometric authentication."}),"\n",(0,r.jsx)(i.h2,{id:"installation",children:"Installation"}),"\n",(0,r.jsx)(i.p,{children:"To begin, add the Biometric dependency to your project:"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-kotlin",children:'implementation("com.github.lavinou.startpoint-android:auth-biometric")\n'})}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h2,{id:"configuration",children:"Configuration"}),"\n",(0,r.jsxs)(i.p,{children:["The ",(0,r.jsx)(i.code,{children:"BiometricConfiguration"})," class is used to configure the Biometric Provider. It allows you to define the backend, customize the user interface, and handle authentication results."]}),"\n",(0,r.jsx)(i.h3,{id:"configuration-properties",children:"Configuration Properties"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:(0,r.jsx)(i.code,{children:"backend"})}),": An implementation of ",(0,r.jsx)(i.code,{children:"BiometricSPAuthBackend"}),", responsible for server-side registration, authentication, and unregistration of biometric credentials."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:(0,r.jsx)(i.code,{children:"image"})}),": An optional image displayed during the biometric registration process."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:(0,r.jsx)(i.code,{children:"onResult"})}),": A callback to handle various outcomes of biometric authentication, such as success, cancellation, or failure."]}),"\n"]}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h2,{id:"example-setting-up-the-biometric-provider",children:"Example: Setting Up the Biometric Provider"}),"\n",(0,r.jsxs)(i.p,{children:["Here's a typical setup for the Biometric Provider within ",(0,r.jsx)(i.strong,{children:"SPAuth"}),":"]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-kotlin",children:'install(SPAuth) {\n\n    title = "Secure Login"\n\n    signInButtonRoute = BiometricSignIn\n    signUpButtonRoute = PasswordSignUp\n\n    exitOnUserCancel = false\n\n    setUserSessionBackend(userSessionBackend)\n\n    addProvider(Biometric) {\n\n        backend = biometricBackend\n\n        image = R.drawable.baseline_fingerprint_24\n\n        onResult = { result ->\n            when (result) {\n                is BiometricResult.Success -> SPAuthNextAction.NavigateTo(MainContent)\n                is BiometricResult.RegistrationSuccess -> SPAuthNextAction.NavigateTo(MainContent)\n                is BiometricResult.OnUserCancelled -> SPAuthNextAction.NavigateTo(\n                    route = PasswordSignIn,\n                    keepBackStack = false\n                )\n                is BiometricResult.BiometricNotRegistered -> SPAuthNextAction.NavigateTo(PasswordSignIn)\n                is BiometricResult.Failure -> SPAuthNextAction.DisplayMessage(\n                    "Something Went Wrong",\n                    "Unable to authenticate successfully"\n                )\n            }\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h2,{id:"biometricspauthbackend",children:"BiometricSPAuthBackend"}),"\n",(0,r.jsxs)(i.p,{children:["The ",(0,r.jsx)(i.code,{children:"BiometricSPAuthBackend"})," interface extends ",(0,r.jsx)(i.strong,{children:"SPAuthenticationBackend"})," and includes additional methods specific to biometric authentication."]}),"\n",(0,r.jsx)(i.h3,{id:"inherited-methods-from-spauthenticationbackend",children:"Inherited Methods from SPAuthenticationBackend"}),"\n",(0,r.jsxs)(i.ol,{children:["\n",(0,r.jsxs)(i.li,{children:["\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.strong,{children:(0,r.jsx)(i.code,{children:"type: String"})}),(0,r.jsx)(i.br,{}),"\n","Identifies the type of authentication supported by the backend (e.g., biometric)."]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["For biometric authentication, the type is ",(0,r.jsx)(i.code,{children:"BiometricCredential.TYPE"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(i.li,{children:["\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.strong,{children:(0,r.jsx)(i.code,{children:"suspend fun authenticate(credential: Credential): SPAuthToken"})}),(0,r.jsx)(i.br,{}),"\n","Authenticates the provided credential and returns an authentication token. This method is used during biometric login."]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Parameters"}),":","\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"credential"}),": The biometric credential to authenticate."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Returns"}),": A valid ",(0,r.jsx)(i.code,{children:"SPAuthToken"})," if authentication succeeds."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Throws"}),": An exception if authentication fails."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"additional-methods-in-biometricspauthbackend",children:"Additional Methods in BiometricSPAuthBackend"}),"\n",(0,r.jsxs)(i.ol,{children:["\n",(0,r.jsxs)(i.li,{children:["\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.strong,{children:(0,r.jsx)(i.code,{children:"suspend fun register(id: BiometricIdentifier): Boolean"})}),(0,r.jsx)(i.br,{}),"\n","Registers a user's biometric credentials with the backend."]}),"\n"]}),"\n",(0,r.jsxs)(i.li,{children:["\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.strong,{children:(0,r.jsx)(i.code,{children:"suspend fun unregister(id: BiometricIdentifier): Boolean"})}),(0,r.jsx)(i.br,{}),"\n","Unregisters a user's biometric credentials from the backend."]}),"\n"]}),"\n",(0,r.jsxs)(i.li,{children:["\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.strong,{children:(0,r.jsx)(i.code,{children:"suspend fun challenge(id: BiometricIdentifier): String"})}),(0,r.jsx)(i.br,{}),"\n","Generates a challenge for biometric authentication."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h2,{id:"authentication-results",children:"Authentication Results"}),"\n",(0,r.jsxs)(i.p,{children:["The ",(0,r.jsx)(i.code,{children:"onResult"})," callback in the ",(0,r.jsx)(i.code,{children:"BiometricConfiguration"})," class handles the following outcomes:"]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:(0,r.jsx)(i.code,{children:"BiometricResult.Success"})}),": Indicates successful authentication with a valid ",(0,r.jsx)(i.code,{children:"SPAuthToken"}),"."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:(0,r.jsx)(i.code,{children:"BiometricResult.RegistrationSuccess"})}),": Indicates successful biometric registration."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:(0,r.jsx)(i.code,{children:"BiometricResult.OnUserCancelled"})}),": Indicates that the user canceled the biometric prompt."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:(0,r.jsx)(i.code,{children:"BiometricResult.BiometricNotRegistered"})}),": Indicates no biometric credentials are registered on the device."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:(0,r.jsx)(i.code,{children:"BiometricResult.Failure"})}),": Indicates an error occurred during authentication."]}),"\n"]}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h2,{id:"example-backend-implementation",children:"Example Backend Implementation"}),"\n",(0,r.jsxs)(i.p,{children:["Here\u2019s an example of a ",(0,r.jsx)(i.code,{children:"BiometricSPAuthBackend"})," implementation:"]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-kotlin",children:'import com.lavinou.startpoint.auth.backend.model.SPAuthToken\nimport com.lavinou.startpoint.auth.biometric.BiometricIdentifier\nimport com.lavinou.startpoint.auth.biometric.BiometricSPAuthBackend\nimport com.lavinou.startpoint.auth.biometric.credentials.BiometricCredential\n\nclass MyBiometricBackend : BiometricSPAuthBackend {\n\n    override val type: String\n        get() = BiometricCredential.TYPE\n\n    override suspend fun authenticate(credential: Credential): SPAuthToken {\n        // Authenticate the biometric credential and return an SPAuthToken\n        return SPAuthToken.Default\n    }\n\n    override suspend fun register(id: BiometricIdentifier): Boolean {\n        // Register biometric credentials with the backend\n        return true\n    }\n\n    override suspend fun unregister(id: BiometricIdentifier): Boolean {\n        // Unregister biometric credentials from the backend\n        return true\n    }\n\n    override suspend fun challenge(id: BiometricIdentifier): String {\n        // Generate a challenge for biometric authentication\n        return "challenge-token"\n    }\n}\n'})}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h2,{id:"summary-of-key-components",children:"Summary of Key Components"}),"\n",(0,r.jsx)(i.h3,{id:"configuration-properties-1",children:"Configuration Properties"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"backend"}),": Connects the Biometric Provider to the server-side authentication logic."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"image"}),": Customizable image for biometric UI."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"onResult"}),": Callback to handle authentication results."]}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"backend-methods",children:"Backend Methods"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Inherited"}),": ",(0,r.jsx)(i.code,{children:"authenticate"})]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Specific"}),": ",(0,r.jsx)(i.code,{children:"register"}),", ",(0,r.jsx)(i.code,{children:"unregister"}),", ",(0,r.jsx)(i.code,{children:"challenge"})]}),"\n"]}),"\n",(0,r.jsx)(i.hr,{})]})}function h(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>o,x:()=>c});var t=n(6540);const r={},s=t.createContext(r);function o(e){const i=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(s.Provider,{value:i},e.children)}}}]);