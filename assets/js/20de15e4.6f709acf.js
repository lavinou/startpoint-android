"use strict";(self.webpackChunkwebdoc=self.webpackChunkwebdoc||[]).push([[5333],{2109:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"plugins/spauth-plugin/providers/password-provider","title":"Password","description":"Documentation for configuring the Password Provider in SPAuth.","source":"@site/docs/plugins/spauth-plugin/providers/password.md","sourceDirName":"plugins/spauth-plugin/providers","slug":"/plugins/spauth-plugin/providers/password-provider","permalink":"/startpoint-android/docs/plugins/spauth-plugin/providers/password-provider","draft":false,"unlisted":false,"editUrl":"https://github.com/lavinou/startpoint-android/tree/main/docs/docs/plugins/spauth-plugin/providers/password.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"password-provider","title":"Password","description":"Documentation for configuring the Password Provider in SPAuth.","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Providers","permalink":"/startpoint-android/docs/category/providers"},"next":{"title":"Biometric","permalink":"/startpoint-android/docs/plugins/spauth-plugin/providers/biometric-provider"}}');var r=s(4848),d=s(8453);const t={id:"password-provider",title:"Password",description:"Documentation for configuring the Password Provider in SPAuth.",sidebar_position:1},a="Password Provider Documentation",o={},l=[{value:"Overview",id:"overview",level:2},{value:"Installation",id:"installation",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Example: Setting Up the Password Provider",id:"example-setting-up-the-password-provider",level:2},{value:"Adding Input Validators",id:"adding-input-validators",level:2},{value:"Example: Password Validators",id:"example-password-validators",level:3},{value:"Handling Authentication Results",id:"handling-authentication-results",level:2},{value:"Example: Result Handlers",id:"example-result-handlers",level:3},{value:"PasswordSPAuthBackend",id:"passwordspauthbackend",level:2},{value:"Inherited Methods from SPAuthenticationBackend",id:"inherited-methods-from-spauthenticationbackend",level:3},{value:"Additional Methods in PasswordSPAuthBackend",id:"additional-methods-in-passwordspauthbackend",level:3},{value:"Example Backend Implementation",id:"example-backend-implementation",level:2},{value:"Summary of Key Components",id:"summary-of-key-components",level:2},{value:"Validators",id:"validators",level:3},{value:"Backend Methods",id:"backend-methods",level:3}];function c(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,d.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"password-provider-documentation",children:"Password Provider Documentation"})}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(n.p,{children:["The Password Provider in ",(0,r.jsx)(n.strong,{children:"SPAuth"})," facilitates password-based authentication by connecting to a backend system, validating user inputs, and defining result-handling logic for authentication flows. It supports sign-in and sign-up processes with flexibility for customization."]}),"\n",(0,r.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,r.jsx)(n.p,{children:"To begin, add the SPAuth dependency to your project:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'implementation("com.github.lavinou.startpoint-android:auth-password")\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,r.jsxs)(n.p,{children:["To use the Password Provider, you need to configure it within the ",(0,r.jsx)(n.strong,{children:"SPAuth"})," setup and define the following:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Backend"}),": Handles server-side authentication logic."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Validators"}),": Ensure the correctness of user inputs (e.g., email, password)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Result Handlers"}),": Specify actions to take based on the authentication outcome."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"example-setting-up-the-password-provider",children:"Example: Setting Up the Password Provider"}),"\n",(0,r.jsx)(n.p,{children:"Here\u2019s an example of how to configure the Password Provider with SPAuth:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'install(SPAuth) {\n\n    title = "Welcome"\n\n    signInButtonRoute = BiometricSignIn\n    signUpButtonRoute = PasswordSignUp\n\n    image = R.drawable.app_icons\n\n    exitOnUserCancel = false\n\n    setUserSessionBackend(userSessionBackend)\n\n    addProvider(Password) {\n        backend = passwordBackend\n        passwordValidators()  // Add input validation rules\n        resultHandlers()      // Define result handling logic\n    }\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"adding-input-validators",children:"Adding Input Validators"}),"\n",(0,r.jsxs)(n.p,{children:["Input validation ensures that users provide acceptable values for fields like email, password, and full name. You can add these rules using the ",(0,r.jsx)(n.code,{children:"addValidator"})," method in the ",(0,r.jsx)(n.code,{children:"PasswordConfiguration"})," class."]}),"\n",(0,r.jsx)(n.h3,{id:"example-password-validators",children:"Example: Password Validators"}),"\n",(0,r.jsx)(n.p,{children:"Define validation rules for various fields:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'fun PasswordConfiguration.passwordValidators() {\n    addValidator(\n        key = USER_KEY,\n        rule = { value -> value.isBlank() },\n        message = "Make sure to enter an email address"\n    )\n    addValidator(\n        key = PASSWORD_KEY,\n        rule = { value -> value.isBlank() },\n        message = "Please add your password"\n    )\n    addValidator(\n        key = PASSWORD_KEY,\n        rule = { value -> value.length in 1..7 },\n        message = "Password is too short."\n    )\n    addValidator(\n        key = FULL_NAME_KEY,\n        rule = { value -> value.isBlank() },\n        message = "Please add your full name"\n    )\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"handling-authentication-results",children:"Handling Authentication Results"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"onResult"})," property defines how the application responds to various authentication results, such as success, validation errors, or backend errors."]}),"\n",(0,r.jsx)(n.h3,{id:"example-result-handlers",children:"Example: Result Handlers"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'fun PasswordConfiguration.resultHandlers() {\n    onResult = { result ->\n        when (result) {\n            is PasswordResult.Success -> SPAuthNextAction.NavigateTo(MainContent)\n            is PasswordResult.ValidationError -> SPAuthNextAction.FieldMessage(\n                field = result.key,\n                message = result.message\n            )\n            is PasswordResult.BackendError -> SPAuthNextAction.FieldMessage(\n                field = "server",\n                message = "Email or password is incorrect"\n            )\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"passwordspauthbackend",children:"PasswordSPAuthBackend"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"PasswordSPAuthBackend"})," interface extends ",(0,r.jsx)(n.strong,{children:"SPAuthenticationBackend"})," and includes additional methods specific to password-based authentication."]}),"\n",(0,r.jsx)(n.h3,{id:"inherited-methods-from-spauthenticationbackend",children:"Inherited Methods from SPAuthenticationBackend"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"type: String"})}),"\nIdentifies the type of authentication supported by the backend (e.g., password)."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["For password-based authentication, the type is ",(0,r.jsx)(n.code,{children:"PasswordCredential.TYPE_PASSWORD_CREDENTIAL"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"suspend fun authenticate(credential: Credential): SPAuthToken"})}),"\nAuthenticates the provided credential and returns an authentication token. This method is used during sign-in."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Parameters"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"credential"}),": The password credential to authenticate."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Returns"}),": A valid ",(0,r.jsx)(n.code,{children:"SPAuthToken"})," if authentication succeeds."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Throws"}),": An exception if authentication fails."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"additional-methods-in-passwordspauthbackend",children:"Additional Methods in PasswordSPAuthBackend"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"suspend fun resetPassword(email: String): Boolean"})}),(0,r.jsx)(n.br,{}),"\n","Initiates a password reset process for the given email address."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"suspend fun confirmPasswordReset(): Boolean"})}),(0,r.jsx)(n.br,{}),"\n","Confirms the password reset process (e.g., after a user clicks a link in an email)."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"suspend fun changePassword(): Boolean"})}),(0,r.jsx)(n.br,{}),"\n","Changes the user's password."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"example-backend-implementation",children:"Example Backend Implementation"}),"\n",(0,r.jsxs)(n.p,{children:["Here\u2019s an example of a ",(0,r.jsx)(n.code,{children:"PasswordSPAuthBackend"})," implementation:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"import com.lavinou.startpoint.auth.backend.model.SPAuthToken\nimport com.lavinou.startpoint.auth.password.PasswordSPAuthBackend\nimport com.lavinou.startpoint.auth.credentials.PasswordCredential\n\nclass MyPasswordBackend : PasswordSPAuthBackend {\n\n    override val type: String\n        get() = PasswordCredential.TYPE_PASSWORD_CREDENTIAL\n\n    override suspend fun authenticate(credential: Credential): SPAuthToken {\n        // Authenticate the password credential and return an SPAuthToken\n        return SPAuthToken.Default\n    }\n\n    override suspend fun resetPassword(email: String): Boolean {\n        // Logic to send a password reset email\n        return true\n    }\n\n    override suspend fun confirmPasswordReset(): Boolean {\n        // Logic to confirm a password reset\n        return true\n    }\n\n    override suspend fun changePassword(): Boolean {\n        // Logic to change the user's password\n        return true\n    }\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"summary-of-key-components",children:"Summary of Key Components"}),"\n",(0,r.jsx)(n.h3,{id:"validators",children:"Validators"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Ensure inputs meet required conditions."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Example Keys"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"USER_KEY"}),": Email address field."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"PASSWORD_KEY"}),": Password field."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"FULL_NAME_KEY"}),": Full name field."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"backend-methods",children:"Backend Methods"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Inherited"}),": ",(0,r.jsx)(n.code,{children:"authenticate"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Specific"}),": ",(0,r.jsx)(n.code,{children:"resetPassword"}),", ",(0,r.jsx)(n.code,{children:"confirmPasswordReset"}),", ",(0,r.jsx)(n.code,{children:"changePassword"})]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>a});var i=s(6540);const r={},d=i.createContext(r);function t(e){const n=i.useContext(d);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(d.Provider,{value:n},e.children)}}}]);